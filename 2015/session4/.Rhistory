{
x <- runif(n)
r <- cdf.spatial.dens(x)
return(r)
}
r_sample <- gen.data(1000,cdf.const.dens)
hist(r_sample)
hist(r_sample,200)
sum(r_sample > 200)/(4*pi*200^3/3)
sum(r_sample > 400)/(4*pi*400^3/3)
sum(r_sample > 600)/(4*pi*600^3/3)
sum(r_sample > 800)/(4*pi*800^3/3)
sum(r_sample > 1000)/(4*pi*1000^3/3)
sum(r_sample < 200)/(4*pi*200^3/3)
sum(r_sample < 400)/(4*pi*400^3/3)
sum(r_sample < 600)/(4*pi*600^3/3)
sum(r_sample < 800)/(4*pi*800^3/3)
sum(r_sample < 1000)/(4*pi*1000^3/3)
sum(r_sample > 800 & r_sample < 1000)/(4*pi*(1000^3-800^3)/3)
sum(r_sample > 600 & r_sample < 800)/(4*pi*(800^3-600^3)/3)
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
rlim=1000 #in parsecs
# Recall from session1, how we can draw samples from a 1D PDF
icdf.const.dens <- function(x)
{
if(!exists("rlim") | is.na(rlim)) print("Error: maximum radius undefined")
r <- ((rlim^3)*x)^(1.0/3.0) # This is the prescription for a constant stellar volume density
return(r)
}
gen.data <- function(n,icdf.spatial.dens)
{
x <- runif(n)
r <- icdf.spatial.dens(x)
return(r)
}
r_sample <- gen.data(1000,icdf.const.dens)
#Run simulation
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
prior.iu<-function(r)
{
if (r <= r.lim) return(1/r.lim) else return(0)
}
prior.iu(0)
prior.iu<-function(r)
{
if (r <= rlim) return(1/rlim) else return(0)
}
prior.iu(0)
prior.iu(10)
prior.iu(1000)
prior.iu(1001)
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(10000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias)
plot(f,sd)
plot(f,bias)
j <- 50
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
plot(measured_p_sample,true_p_sample)
abline(1,1)
abline(0,1)
plot(measured_p_sample,true_p_sample,pch=".")
abline(0,1)
hist(scaled_residuals)
hist(scaled_residuals,200)
plot(measured_p_sample,true_p_sample,pch=".")
range(scaled_residuals)
which(scaled_residuals < -10)
which(scaled_residuals < -100)
which(scaled_residuals < -500)
true_p_sample[6353]
measured_p_sample[6353]
(measured_p_sample[6353]-true_p_sample[6353])/true_p_sample[6353]
(measured_r_sample[6353]-true_r_sample[6353])/true_r_sample[6353]
(estimated_r_sample[6353]-true_r_sample[6353])/true_r_sample[6353]
scaled_residuals[6353]
measured_p_sample[6353]
true_r_sample[filter][6353]
estimated_r_sample[filter][6353]
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(100000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (true_r_sample[filter]-estimated_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias)
plot(f,sd)
plot(f,bias,ty="l",ylim=c(0,500))
plot(f,sd,ty="l",ylim=c(0,500))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
#  filter <- measured_p_sample > 0
filter <- measured_p_sample/measured_p_sample
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500))
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
#  filter <- measured_p_sample/measured_p_sample
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500))
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
filter <- measured_p_sample > 0
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- filter & estimated_r_sample <= 1000
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500))
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/max_posterior_p
estimated_r_sample[measured_p_sample <0 | estimated_r_sample > rlim] <- rlim
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample
estimated_r_sample[measured_p_sample <0 | estimated_r_sample > rlim] <- rlim
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(10000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(100000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
true_r_sample <- gen.data(1000000,icdf.const.dens)
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample # For flat unbounded priors, there is no need to compute the posterior
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,500),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,500),col="blue")
require("beepr")
beep(3)
beep(3)
beep(3)
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample
estimated_r_sample[measured_p_sample <0 | estimated_r_sample > rlim] <- rlim
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
length(true_p_sample)
true_r_sample <- gen.data(1000,icdf.const.dens) # So we limit the number of samples: do not expect the same plots
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample
estimated_r_sample[measured_p_sample <0 | estimated_r_sample > rlim] <- rlim
filter <- measured_p_sample > 0
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample
estimated_r_sample[measured_p_sample <0 | estimated_r_sample > rlim] <- rlim
#  filter <- measured_p_sample > 0
filter <- rep(TRUE,length(measured_p_sample))
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
f <- seq(0,1,0.01) # This is sigma_p/p (see Bailer-Jones, 2015)
# This takes ~5-10 minutes: true_r_sample <- gen.data(1000000,icdf.const.dens)
true_r_sample <- runif(1000,0,1000) # So we limit the number of samples: do not expect the same plots
true_p_sample <- 1/true_r_sample
measured_p_sample <- rep(NA, length(true_r_sample))
bias <- rep(NA,length(f))
sd <- rep(NA,length(f))
for (j in 1:length(f)) # This f is sigma/p
{
s_p_sample <- f[j]*true_p_sample
for (i in 1:length(true_p_sample)){
measured_p_sample[i] <- rnorm(1,true_p_sample[i],s_p_sample[i])
}
estimated_r_sample <- 1.0/measured_p_sample
estimated_r_sample[measured_p_sample <0 | estimated_r_sample > rlim] <- rlim
#  filter <- measured_p_sample > 0
filter <- rep(TRUE,length(measured_p_sample))
scaled_residuals <- (estimated_r_sample[filter]-true_r_sample[filter])/true_r_sample[filter]
bias[j] <- mean(scaled_residuals)
sd[j] <- sd(scaled_residuals)
}
plot(f,bias,ty="l",ylim=c(0,5),ylab="Bias (black) and Std. Dev. (Blue)")
lines(f,sd,ty="l",ylim=c(0,5),col="blue")
